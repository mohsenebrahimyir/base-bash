[["index.html", "مبانی Bash مقدمه‌ای بر دستورات Bash در Linux/Unix پیش گفتار", " مبانی Bash مقدمه‌ای بر دستورات Bash در Linux/Unix محسن ابراهیمی August, 2022 پیش گفتار به همراه این کتاب می‌توانید یادگیری مبانی bash را شروع کنید. سعی کنید بعد از هر آموزش تمرینات مربوط به آن را انجام دهید. نظرات و پیشنهادات خود را می‌توانید از طریق ایمیل mohsenebrahimy.ir@gmail.com برای بهبود کتاب به نویسنده ارسال کنید تا در هر بروزرسانی اصلاحات صورت گیرد. این نسخه در تاریخ ۱۴۰۱-۶-۳ بروزرسانی شده است. https://mohsenebrahimyir.github.io/base-bash/ امیدوارم این کتاب برایتان مفید باشد. محسن ابراهیمی www.mohsenebrahimy.ir "],["مقدمه.html", "مقدمه", " مقدمه این کتاب از روی کتاب Andy’s Brain Book (Jahn 2022) تهیه شده است. باقی محتوا از منیع اینترنتی آزاد گرفته شده و یا توسط نویسنده تولید شده‌اند. بنابراین کپی برداری با ذکر منبع آزاد می‌باشد. منابع "],["آموزش-لینوکس-و-یونیکس.html", "فصل 1 آموزش لینوکس و یونیکس", " فصل 1 آموزش لینوکس و یونیکس ترمینال (Terminal) یا خط فرمان (Command line): به جای کلیک کردن با موس از طریق ترمینال مستقیم دستورات را اجرا می‌کنیم. &gt;_ خط فرمان لینوکس و یونیکس (bash): $ دانلود Cygwin برای ویندوز: https://www.cygwin.com/ "],["مسیرها-و-پوشهها.html", "فصل 2 مسیرها و پوشه‌ها 2.1 آدرس دهی 2.2 دستورات کاربردی", " فصل 2 مسیرها و پوشه‌ها پوشه (Directory or Folder) مسیر یا آدرس (Path) / ├── bin | ├── ls | ├── cd | ├── pwd | └── ... ├── home | └── user | ├── Desktop | ├── Documents | ├── Downloads | └── ... ├── mnt ├── sys └── ... 2.1 آدرس دهی آدرس دهی مطلق: /: ریشه (Root) اصلی و جدا کننده ترتیب سلسله مراتبی پوشه‌ها (/&lt;DIR&gt;/&lt;SUBDIR&gt;/) ~/: اشاره به مسیر پوشه /home/&lt;USER&gt;/ آدرس دهی نسبی: ./: اشاره به پوشه‌ی که در آن قرار داریم. ../: اشاره به پوشه بالایی. 2.2 دستورات کاربردی چاپ آدرس پوشه جاری: $ pwd رفتن به پوشه مورد نظر: $ cd ~/ چاپ لیست فایل‌ها و پوشه‌ها: $ ls $ ls ~/ چاپ توضیحات و آرگومان‌های دستورات: $ man ls "],["کار-با-فایلها-و-پوشهها.html", "فصل 3 کار با فایل‌ها و پوشه‌ها", " فصل 3 کار با فایل‌ها و پوشه‌ها ساخت پوشه جدید $ mkdir dirname ساخت فایل جدید $ touch filename.txt باز کردن فایل در ترمینال $ nano filename.txt انتقال فایل یا پوشه: $ mv filename.txt dirname کپی فایل یا بوشه: $ cp dirname/filename.txt . حذف فایل: $ rm filename.txt حذف پوشه خالی: $ rmdir dirname حذف پوشه به همراه محتویات آن: $ rm -rf dirname "],["واژههای-کلیدی.html", "فصل 4 واژه‌های کلیدی", " فصل 4 واژه‌های کلیدی دستکاری (Manipulation or Redirection): ویراش محتویات یا افزودن اطلاعات به آخر فایل‌ها اسکریپت (Script): فایل حاوی کد‌های برنامه نویسی ورودی استاندارد (stdin): اطلاعاتی که به خط فرمان می‌دهیم. خروجی استاندارد (stdout): اطلاعاتی که بدون خطا از خط فرمان می‌گیریم. خطای استاندارد (stderr): خطاهایی که در خط فرمان ایجاد می‌شود. جریان‌ها (Streams): اطلاعاتی که خط فرمان جریان دارد. "],["خواندن-فایل.html", "فصل 5 خواندن فایل", " فصل 5 خواندن فایل چاپ کردن متن داخل فایل: $ cat filename.txt چاپ کردن متن داخل فایل با قابلیت حرکت روی متن‌ها: $ less filename.txt چاپ ده سطر اول فایل: $ head filename.txt چاپ ده سطر آخر فایل: $ tail filename.txt شمارش تعداد سطر و کلمات فایل: $ wc filename.txt نوشتن خروجی استاندارد در فایل جدید یا رونویسی روی فایل موجود: $ head filename.txt &gt; headfile.txt افزودن خروجی استاندارد در فایل موجود: $ tail filename.txt &gt;&gt; headfile.txt تبدیل خروجی استاندارد یک دستور به ورودی استاندارد دستور دیگر: $ ls ~/ | tail خطوط خروجی استاندارد را با توجه به حروف اولشان ردیف می‌کند: $ ls ~/ | sort "],["شل.html", "فصل 6 شل", " فصل 6 شل شل (Shells): محیطی که عملیات‌هایی که به عنوان ورودی در آن تایپ می‌کنید به زبان ماشین تبدیل می‌کند. انواع شل: bash tcsh zsh … نحو (Syntax) دستورات درون ساخت (built-in commands) cd ls pwd "],["حلقه-for.html", "فصل 7 حلقه for", " فصل 7 حلقه for خیلی از کارهایی که در عمل انجام می‌شود شامل کارهایی کوچک تکراری است که به طور متناوب برای موارد مختلف اجرا می‌شود. اینگونه کار‌ها را به استفاده از حلقه‌ها اجرا می‌کنند. حلقه for $ for i in 1 2 3 &gt; do echo $i &gt; done 1 2 3 می‌تواینم همین کد را تک خطی نیز بنویسیم $ for i in 1 2 3; do echo $i; done 1 2 3 حلقه for سه بخش دارد که اگر یک خطی بنویسیم باید آن‌ها را با ; جدا کنیم. اعلامیه (Declaration): در بخش for i in 1 2 3; به ترتیب موارد بعد از in را به متغییر i اختصاص می‌دهد. شماره‌هایی که بعد از in آمده‌اند را لیست (list) می‌نامند. بدنه (Body): در بخش do echo $i; هر دستوری که بعد از do نوشته شود برای هر مورد می‌تواند تکرار شود. برای مثال اینجا به ترتیب هر شماره با تابع echo چاپ می‌شود. اتمام (End): در این بخش done تنها شامل یک کلمه است که به معنای خارج شدن از حلقه بعد از اجرا برای همه موارد درون لیست است. می‌توان بخش‌های بیشتری را با گذاشتن ; انتهای آن به بدنه اضافه نمود. $ for i in 1 2 3; do echo $i; echo “You just printed the number $i”; done 1 “You just printed the number 1” 2 “You just printed the number 2” 3 “You just printed the number 3” مثلا اگر ما تعدادی اسامی به صورت sub-01 داشته باشیم می‌توانیم به زیر برای هر یک یه حلقه ایجاد کنیم $ for i in sub-01 sub-02 … sub-26; do echo $i; done sub-01 sub-02 … sub-26 اما یک روش ساده تر برای نوشتن کد این است که از دستور seq 1 10 برای ایجاد لیستی از اعداد یک تا ده استفاده کنیم تا از نوشتن کد تکراری جلوگیری کنیم. $ for i in `seq 1 26`; do echo “sub-$i”; done sub-1 sub-2 … sub-26 اگر بخواهیم حتما اعداد به صورت دورقمی چاپ شوند یعنی قبل از اعداد یک رقمی یه رقم صفر نیز باشد می‌توانیم به صورت زیر نیز عمل کنیم. $ for i in `seq -w 1 26`; do echo “sub-$i”; done sub-01 sub-02 … sub-26 با استفاده از دستور ls می‌توانیم بر روی لیستی از فایل‌های درون یک پوشه (مثلا پوشه خانه ~/ ) حلقه اجرا کنیم. $ for i in `ls ~/`; do echo $i; done bin Desktop Documents Downloads … "],["متغییر.html", "فصل 8 متغییر", " فصل 8 متغییر متغییر (Variable) اختصاص دادن یک مقدار (Value) به یک نام که این مقدار می‌تواند یک عدد (Number) یا یک رشته (String) باشد شل bash $ x=3 $ echo $x 3 شل tcsh &gt; set x=3 &gt; echo $x 3 چاپ نام شل $ echo $0 bash زیرشل (subshell): اگر درون یک شلی به شل دیگر برویم آن شل یک زیرشل از شل قبلی است. bash └── tcsh └── zsh محیط زیست جهانی (World the environment) اگر بخواهیم یک متغییر در تمام زیرشل‌ها معتبر باشد باید از روش‌های زیر استفاده کنیم. bash $ export x=3 tcsh &gt; setenv x 3 خروج از یک شل $ exit فایل .bashrc: در این فایل دستورات اجرایی bash قرار دارد که به صورت خودکار هر زمان که یک شل ایجاد می‌شود اجرا می‌شود. متغییر‌های مسیر (PATH Variable): لیستی از مسیرهای پوشه‌های پرکاربرد است که دستورات اجرایی در آن‌ها هستند. که با : از هم جدا شده‌اند. اگر دستوری را در شل قرار دهید، شل برای یافتن فایل اجرایی این دستور تمام این مسیر‌ها را جستجو می‌کند. اگر فایل یافت نشد خطای استاندارد Command '&lt;COMMAND&gt;' not found برمی‌گرداند. $ echo $PATH /usr/local/fsl/bin:/home/mohsen/bin:/usr/local/bin:... "],["گزاره-شرطی.html", "فصل 9 گزاره شرطی 9.1 گزاره شرطی: 9.2 گزاره اگر … 9.3 گزاره اگر و دیگر 9.4 گزاره شرطی «اگر» و «دیگر اگر» و «دیگر» 9.5 عملگر «و» 9.6 عملگر «یا» 9.7 آزمون‌ها", " فصل 9 گزاره شرطی 9.1 گزاره شرطی: گزاره شرطی (Conditional Statements) را if-else نیز می‌نامند: اگر گزاره درست (true) باشد کاری انجام شود. اگر گزاره غلط (false) باشد کار دیگری انجام شود. 9.2 گزاره اگر … اگر درست بود پس فلان کار را انجام بده. برای مثال در کد زیر اگر سن بزرگتر از ده بود عبارت The age is greater than 10. را چاپ کن: $ age=20 $ if [[ $age -gt 10 ]] &gt; then &gt; echo &quot;The age is greater than 10.&quot; &gt; fi The age is greater than 10. مثل حقله for گزاره if-else هم سه بخش دارد. گزاره شرطی Conditional Statement: اولین بخش با کلمه کلیدی if شروع می‌شود. و پس از چک کردن شرط که در بین براکت ([[]]) نوشته می‌شود، در صورت درست بودن شرط به بخش بعد می‌رود. در گزاره $age -gt 10 بیشتر بودن سن را چک می‌کند. بدنه (Body): درصوت درست بودن بخش اول دستورات این بخش اجرا می‌شود که با کلمه کلیدی then شروع می‌شود. که کاری که مد نظرمان هست را بعد آن می‌نویسیم. که می‌تواند شامل دستورات زیادی باشد. اتمام End: در این بخش فقط کلمه کلیدی fi را می‌نویسیم که بیانگر اتمام گزاره شرطی است. 9.3 گزاره اگر و دیگر در این گزاره یک حالت دیگر else هم وجود دارد که اگر شرط if غلط بود دستورات دستورات دیگری اجرا می‌شود. $ age=8 $ if [[ $age -gt 10 ]] &gt; then &gt; echo &quot;The age is greater than 10.&quot; &gt; else &gt; echo &quot;The variable is equal or less than 10.&quot; &gt; fi The variable is equal or less than 10. 9.4 گزاره شرطی «اگر» و «دیگر اگر» و «دیگر» در این گزاره یک حال دیگر اگر elif وجود دارد که اگر شرط اول درست نبود گزاره شرطی دیگری را بررسی می‌کند. $ age=10 $ if [[ $VAR -gt 10 ]] &gt; then &gt; echo &quot;The variable is greater than 10.&quot; &gt; elif [[ $VAR -eq 10 ]] &gt; then &gt; echo &quot;The variable is equal to 10.&quot; &gt; else &gt; echo &quot;The variable is less than 10.&quot; &gt; fi The variable is equal to 10. 9.5 عملگر «و» با عملگر «و» &amp;&amp; می‌توان دو شرط را باهم در یک گزاره بررسی کرد که اگر هر دو شرایط درست بودند دستورات در بدنه اجرا شود. $ age=20 $ if [[ $VAR -gt 10 &amp;&amp; $VAR -lt 30 ]] &gt; then &gt; echo &quot;The variable is in the range of 10 to 30.&quot; &gt; else &gt; echo &quot;The variable is not between 10 and 30.&quot; &gt; fi The variable is in the range of 10 to 30. 9.6 عملگر «یا» با استفاده از عملگر «یا» || می‌توانیم دو شرط را در یک گزاره بررسی کنیم که اگر یکی از آن‌ها برقرار بود دستورات بدنه اجرا شود. $ age=50 $ if [[ $VAR -lt 10 || $VAR -gt 30 ]] &gt; then &gt; echo &quot;The variable is not between 10 and 30.&quot; &gt; else &gt; echo &quot;The variable is in the range of 10 to 30.&quot; &gt; fi The variable is not between 10 and 30. 9.7 آزمون‌ها -n VAR: اگر اندازه VAR بیشتر از صفر باشد درست است. -z VAR: اگر VAR خالی باشد درست است. STR1 == STR2: اگر رشته STR1 با رشته STR2 مساوی باشد درست است. STR1 != STR2: اگر رشته STR1 با رشته STR2 مساوی نباشد درست است. INT1 -eq INT2: اگر عدد INT1 با عدد INT مساوی باشند درست است. INT1 -gt INT2: اگر عدد INT1 از عدد INT2 بزرگتر باشد درست است. INT1 -lt INT2: اگر عدد INT1 از عدد INT2 کوچکتر باشد درست است. INT1 -ge INT2: اگر عدد INT1 از عدد INT2 بزرگتر یا مساوی باشد درست است. INT1 -le INT2: اگر عدد INT1 از عدد INT2 کوچکتر یا مساوی باشد درست است. -h FILE: اگر FILE وجود داشته و یک پیوند نمادین باشد درست است. -r FILE: اگر FILE وجود داشته و قابل خواندن باشد درست است. -w FILE: اگر FILE وجود داشته و قابل نوشتن باشد درست است. -x FILE: اگر FILE وجود داشته و قابل اجرا باشد درست است. -d FILE: اگر FILE وجود داشته و یک پوشه باشد درست است. -e FILE: اگر FILE وجود داشته و فایل باشد . (بدون در نظر گرفتن نوع آن) درست است. -f FILE: اگر FILE وجود داشته و یک فایل متنی باشد (مثلا پوشه یا دستگاه نباشد.) درست است. "],["references.html", "منابع", " منابع "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
